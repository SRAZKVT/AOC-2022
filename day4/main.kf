include "std.kf" end

func get_packed_range int ptr ptr -- void in
	rot rot
	dup
	0
	while over pread8 '-' eq not do
		1 plus swap ptrinc swap
	end swap drop
	get_first_n 

	str_to_int 
	if not do
		"Failed to parse the file properly\n" eprints
		1 exit
	end

	rot rot
	
	str_to_int 
	if not do
		"Failed to parse the file properly\n" eprints
		1 exit
	end

	swap
	rot save swap pwrite8
	swap ptrinc swap
	pwrite8
end

func part1 void -- void in
	0
	get_content_of_input
	while over 0 eq not do
		get_line 
		dup
		0
		while over pread8 ',' eq not do
			1 plus swap ptrinc swap
		end swap drop

		get_first_n
		16 memory save
		get_packed_range

		rot rot
		16 memory save
		get_packed_range

		false
		rot rot

		if over pread8 over pread8 gteq do
			if over ptrinc pread8 over ptrinc pread8 lteq do
				rot
				true or
				rot rot
			end
		end

		swap

		if over pread8 over pread8 gteq do
			if over ptrinc pread8 over ptrinc pread8 lteq do
				rot
				true or
				rot rot
			end
		end

		drop drop

		if do
			rot
			1 plus
			rot rot
		end
	end drop drop
	printi
end

func part2 void -- void in
	0
	get_content_of_input
	while over 0 eq not do
		get_line 
		dup
		0
		while over pread8 ',' eq not do
			1 plus swap ptrinc swap
		end swap drop

		get_first_n
		16 memory save
		get_packed_range

		rot rot
		16 memory save
		get_packed_range

		false
		rot rot

		if over pread8 over pread8 gteq do
			if over pread8 over ptrinc pread8 lteq do
				rot true or rot rot
			end
		end

		if over ptrinc pread8 over pread8 gteq do
			if over ptrinc pread8 over ptrinc pread8 lteq do
				rot true or rot rot
			end
		end

		if over pread8 over pread8 gteq do
			if over ptrinc pread8 over ptrinc pread8 lteq do
				rot
				true or
				rot rot
			end
		end

		swap

		if over pread8 over pread8 gteq do
			if over ptrinc pread8 over ptrinc pread8 lteq do
				rot
				true or
				rot rot
			end
		end

		drop drop

		if do
			rot
			1 plus
			rot rot
		end
	end drop drop
	printi
end

func main void -- void in
	if argc 2 eq not do
		"The input file only must be given as a parameter\n"
		eprints
		1 exit
	end
	"Part 1 = " prints part1 '\n' printc
	"Part 2 = " prints part2 '\n' printc
end
